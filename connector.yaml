###
## Prereqs:
## 1. Create Truststore Secret from file
##    - oc create secret generic eventstreams-truststore-jks --from-file=/Users/osowski/Downloads/es-cert.jks
##
##
###
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-config
data:
  BOOTSTRAP_SERVERS: __BOOTSTRAP_SERVERS__
  OFFSET_STORAGE_TOPIC: connect-offsets
  CONFIG_STORAGE_TOPIC: connect-configs
  STATUS_STORAGE_TOPIC: connect-status
---
apiVersion: v1
kind: Secret
metadata:
  name: eventstreams-credentials
stringData:
  EVENTSTREAMS_API_KEY: "__EVENTSTREAMS_API_KEY__"
  # Need to do work here to remove *.jks from container image itself
  EVENTSTREAMS_TRUSTSTORE_PATH: TBD
  EVENTSTREAMS_TRUSTSTORE_PASSWORD: TBD
---
apiVersion: v1
kind: Secret
metadata:
  name: aws-service-creds
stringData:
  AWS_ACCESS_KEY_ID: TODO
  AWS_SECRET_ACCESS_KEY: TODO
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-connect
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: kafka-connect
      app.kubernetes.io/instance: kafka-connect-custom1234
      app.kubernetes.io/name: kafka-connect-custom1234
      release: kafka-connect-custom1234
  template:
    metadata:
      labels:
        app.kubernetes.io/component: kafka-connect
        app.kubernetes.io/instance: kafka-connect-custom1234
        app.kubernetes.io/name: kafka-connect-custom1234
        release: kafka-connect-custom1234
    spec:
      serviceAccountName: default
      initContainers:
      - name: generate-properties
        image: alpine:3.11
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', 'echo $KAFKA_BOOTSTRAP']
        #####
        ## TODO
        ## - Write out details for connect-distributed.properties
        ## - Write out details for connect-s3.properties
        ## - Write out details for connect-xyz.properties (PATTERN)
        ###
        env:
          - name: KAFKA_BOOTSTRAP
            valueFrom:
              configMapKeyRef:
                key: BOOTSTRAP_SERVERS
                name: kafka-config
          - name: OFFSET_STORAGE_TOPIC
            valueFrom:
              configMapKeyRef:
                key: OFFSET_STORAGE_TOPIC
                name: kafka-config
          - name: CONFIG_STORAGE_TOPIC
            valueFrom:
              configMapKeyRef:
                key: CONFIG_STORAGE_TOPIC
                name: kafka-config
          - name: STATUS_STORAGE_TOPIC
            valueFrom:
              configMapKeyRef:
                key: STATUS_STORAGE_TOPIC
                name: kafka-config
          - name: EVENTSTREAMS_API_KEY
            valueFrom:
              secretKeyRef:
                key: EVENTSTREAMS_API_KEY
                name: eventstreams-credentials
          - name: EVENTSTREAMS_TRUSTSTORE_PATH
            valueFrom:
              secretKeyRef:
                key: EVENTSTREAMS_TRUSTSTORE_PATH
                name: eventstreams-credentials
          - name: EVENTSTREAMS_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: EVENTSTREAMS_TRUSTSTORE_PASSWORD
                name: eventstreams-credentials
        volumeMounts:
        - name: kafka-connect-properties
          mountPath: "/tmp/connect"
      containers:
      - name: connector
        image: ibmcase/kafka-connect:latest
        imagePullPolicy: Always
        env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: AWS_ACCESS_KEY_ID
                name: aws-service-creds
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_SECRET_ACCESS_KEY
                name: aws-service-creds
          #- name: KAFKA_BOOTSTRAP
          #  valueFrom:
          #    configMapKeyRef:
          #      key: BOOTSTRAP_SERVERS
          #      name: kafka-config
          #- name: OFFSET_STORAGE_TOPIC
          #  valueFrom:
          #    configMapKeyRef:
          #      key: OFFSET_STORAGE_TOPIC
          #      name: kafka-config
          #- name: CONFIG_STORAGE_TOPIC
          #  valueFrom:
          #    configMapKeyRef:
          #      key: CONFIG_STORAGE_TOPIC
          #      name: kafka-config
          #- name: STATUS_STORAGE_TOPIC
          #  valueFrom:
          #    configMapKeyRef:
          #      key: STATUS_STORAGE_TOPIC
          #      name: kafka-config
          #- name: EVENTSTREAMS_API_KEY
          #  valueFrom:
          #    secretKeyRef:
          #      key: EVENTSTREAMS_API_KEY
          #      name: eventstreams-credentials
          #- name: EVENTSTREAMS_TRUSTSTORE_PATH
          #  valueFrom:
          #    secretKeyRef:
          #      key: EVENTSTREAMS_TRUSTSTORE_PATH
          #      name: eventstreams-credentials
          #- name: EVENTSTREAMS_TRUSTSTORE_PASSWORD
          #  valueFrom:
          #    secretKeyRef:
          #      key: EVENTSTREAMS_TRUSTSTORE_PASSWORD
          #      name: eventstreams-credentials
        volumeMounts:
        - mountPath: "/tmp/connect"
          name: kafka-connect-properties
          readOnly: true
          ## TODO Update mount path to overwrite existing container files
      volumes:
      - name: kafka-connect-properties
        emptyDir:
          medium: Memory
      #- name: file-based-secret
      #  secret:
      #    secretName: "openliberty-bootstrap"

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-connect-custom1234
  labels:
    app.kubernetes.io/component: kafka-connect
    app.kubernetes.io/instance: kafka-connect-custom1234
    app.kubernetes.io/name: kafka-connect-custom1234
    release: kafka-connect-custom1234
spec:
  type: NodePort
  ports:
  - name: http
    port: 9080
    ## TODO Determine needed port numbers and visibility
  selector:
    app.kubernetes.io/component: kafka-connect
    app.kubernetes.io/instance: kafka-connect-custom1234
    app.kubernetes.io/name: kafka-connect-custom1234
    release: kafka-connect-custom1234
